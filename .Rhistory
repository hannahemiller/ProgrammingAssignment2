demo()
lm.glm
demo(stats)
demo(stats=lm.glm)
install.packages (KernSmooth)
install.packages (slidify)
install.packages ("slidify")
install.packages("slidify")
install.packages("KernSmooth")
library (KernSmooth)
install.packages("swirl")
load("swirl")
load("hw1_data")
x[2]
hw1_data[2]
mean("ozone")
average("ozone")
sum("ozone")
mean("ozone")
mean(ozone)
hw1_data <- read.csv("~/Desktop/JHU_data_science/hw1_data.csv")
View(hw1_data)
mean("ozone")
mean(ozone)
ozone [true]
"ozone" [true]
[[ozone]]
[["ozone"]]
ozone[[ozone]]
hw1_data[[ozone]]
hw1_data[["ozone"]]
ozone <- is.na
hw1_data<-is.na("ozone")
hw1_data<-is.na(ozone)
good <- complete.cases(Ozone)
good <- complete.cases(ozone)
good <- complete.cases(ozone)
$ozone
hw1_data$ozone
ozone <-hw1_data["ozone>31,"]
ozone <-hw1_data["ozone">31,]
ozone <-hw1_data["ozone">31, ]
library("swirl")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
library("swirl")
ls()
rm(list=ls())
swirl()
s
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-(sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7)))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
install.packages("visreg")
install.packages(c("class", "foreign", "jsonlite", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rgl", "rstudioapi", "sp", "spatial"))
myobject <- (1:10)
myobject <- (1, length=10)
myobject <- (1,10)
myobject <- c(1,10)
myobject <- c(1, length=10)
sum(myobject)
myobject <- c(from=1, to=10)
myobject<- c(1,10)
myobject <- c(1:10)
sum(myobject)
paste)(x,z,y)
paste(x,z,y)
x <- "R is great"
y <- "and I will love it"
z <- c(4,7,45)
paste(x,z,y)
q <- c(1,2,3)
rep(q, times=10)
rep(q, times=11, length=31)
q[[7]]
q[7]
w <- rep(q, times=11, length=31)
w[7]
myfirstfn <- function(x) {x+x}
myfirstfn(10)
print(value)}
print(value)}
mysecondfn <- function(t,z) {
mysecondfn <- function(t,z) {value= z*3, value= value * t, print(value)}
mysecondfn <- function(t,z) {value= z*3 value= value * t  print(value)}
print(value)}
mysecondfn <- function(t,z) {value= z*3
print(value)}
mysecondfn <- function(t,z) {value= z*3
mysecondfn <- function(t,z) {
mysecondfn <- function(t,z) {
value= z*3
value= value * t
print(value)}
help
mysecondfn <- function(t,z) {
z=9
print(value)}
z=9
t=5
mysecondfn(t,z)
mysecondfn <- function(t,z) {
z=9
mysecondfn(t,z)
t=5
.....
z=9
mysecondfn <- function(t,z) {
mysecondfn(t,z)
mysecondfn <- function(t,z) {
value = z*3
value = value *t
print(value)}
t=5
z=9
mysecondfn(t,z)
for (i in 1:15) {print(i)}
?lynx
head(lynx)
head(iris)
tail(lynx)
tail(iris)
summary(lynx)
plot(lynx)
hist(lynx)
sum(iris$Sepal.Length)
attach(iris)
sum(Sepal.Length)
plot(lynx, main="Lynx Trapplings", col='red')
plot(lynx, main="Lynx Trapplings", col='red', col.main=52, cex.main=1.5)
plot(lynx, main="Lynx Trappings", col='red', col.main=52, cex.main=1.5)
?pch
x=2:4
plot(x, pch='c')
plot(x, pch=13)
plot(rivers)
?rivers
head(rivers)
plot(rivers, pch=8, col='green', main="Lengths of NA rivers", col.main='red')
length(rivers)
X = matrix(c(1:9),nr=3, byrow=T)
X
apply(X,1,mean)
apply(X,2,mean)
apply(X,1,plot)
head(diamonds)
?diamonds
library(ggplot2)
head(diamonds)
tail(diamonds)
attach(diamonds)
attach(diamonds)
qqnorm(depth)
hist(depth)
depthsmall <- sample(depth, 5000)
shapiro.test(depthsmall)
library(nortest)
install.packages("nortest")
cvm.tst(depth)
library(nortest)
cvm.tst(depth)
cvm.test(depth)
lillie.test(depth)
lf.test(depthsmall)
sf.test(depthsmall)
pearson.test(depth)
histogram(~ Sepal.Length | Species, xlab="", data=iris,
layout=c(3,1), type="density", main="Lattice Histogram",
sub="Iris Dataset, Sepal Length")
library(lattice)
histogram(~ Sepal.Length | Species, xlab="", data=iris,
layout=c(3,1), type="density", main="Lattice Histogram",
sub="Iris Dataset, Sepal Length")
qqmath(~ Sepal.Length | Species, xlab="", data=iris)
qqmath(~ Sepal.Length | Species, xlab="", data=iris, distribution=qunif)
bwplot(Species~Sepal.Length, data=iris)
bwplot(Species~Sepal.Length, data=iris, panel=panel.violin)
library(MASS)
?lda
mylda <- lda(data=mtcars, cyl~wt +mpg)
plot(mylda)
mylda
wt = c(2.2, 4, 1.1, 5)
mpg = c(26, 20, 27, 15)
class = c(4, 6, 4, 8)
test = data.frame(wt, mpg, class)
mylda.prediction <- predict(object=mylda, newdata=test[c(1,2)])$class
mylda.prediction
table(mylda.prediction, test[,3])
install.packages("meta")
library(meta)
meta2= metagen(log(rr), se, data=Aspirin)
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
head(hw1_data)
tail(hw1_data)
hw1_data[47]
h1_data$ozone[47]
hw1_data$ozone[47]
is.na(hw1_data$ozone)
x <- hw1_data$ozone
x
hw1_data[[47]]
x <- hw1_data$ozone
hw1_data$ozone
hw1_data
ozone
hw1_data$ozone
subset(hw1_data, select=c('ozone''))
subset(hw1_data, select=c("ozone"))
z
subset(hw1_data, select=c("ozone"))
subset(hw1_data, select=c("ozone"))"
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
subset(hw1_data, select=c("ozone"))
subset(hw1_data, select="ozone")
subset(hw1_data, select="Ozone")
x <- subset(hw1_data, select="Ozone")
is.na(x)
y <- is.na(x)
y.count(FALSE)
'y'.count(FALSE)
sum(y==FALSE)
sum(y==TRUE)
x <- subset(hw1_data, select="Ozone", >=0)
source('~/.active-rstudio-document', echo=TRUE)
z <- subset(x, select= '>=0')
z <- subset(x, >=0)
z <- subset(x, Ozone>=0)
mean(z)
sum(z)
4887/116
all <- subset(hw1_data, Ozone>31, Temp>90)
View(all)
all <- hw1_data[ which(hw1_data$Ozone==31
View(all)
all <- hw1_data[ which(hw1_data$Ozone==31 & hw1_data$Temp > 90), ]
View(all)
all <- hw1_data[ which(hw1_data$Ozone>31 & hw1_data$Temp>90), ]
View(all)
mean(all$Solar.R)
june <- hw1_data[which(hw1_data$Month==6)]
june <- hw1_data[which(hw1_data$Month==6),]
View(june)
mean(june$Temp)
may <- hw1_data [which(hw1_data$Month=5),]
may <- hw1_data [which(hw1_data$Month==5),]
max)(may$Ozone)
max(may$Ozone)
may <- z [which(z$Month==5),]
max(may$Ozone)
may <- z [which(z$Month==5),]
View(z)
}
add2 <- function(x,y) {
x + y
}
add2(3,5)
x <- 1:20
above <- function(x,n) {
use <- x>n
x[use]
}
above(x)
above(x,12)
above <- function(x,n=10) {
use <- x>n
x[use]
}
above(x)
column_mean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
column_mean(iris)
column_mean <- function(y, removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm=removeNA)
}
means
}
column_mean(iris)
setwd("~/Desktop/JHU_data_science")
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1,Weight]
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day==30), "Weight"]
andy.start <- andy[1, "Weight"]
andy.end <- andy[30, "Weight"]
andy.loss <- andy.start - andy.end
andy.loss
list.files(diet_data)
list.files("diet_data")
files <- list.files("diet_data")
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
files.full <- list.files("diet_data", full.names=TRUE)
files.full
head(read.csv(files[3]))
head(read.csv(files.full[3]))
andy_david <- rbind(andy, read.csv(files.full[2]))
head(andy_david)
tail(andy_david)
day.25 <- andy_david[which(andy_david$Day == 25)]
day.25 <- andy_david[which(andy_david$Day == 25),]
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files.full[i]))
}
str(dat)
median(dat$Weight)
dat
median(dat$Weight, na.rm=TRUE)
dat.30 <- dat[which(dat[, "Day"]==30),]
dat.30
median(dat.30$Weight)
weightmedian <- function(directory, day) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which([, "Day"] == day),]
median(dat_subset [ , "Weight"], na.rm=TRUE)
}
weightmedian("diet_data", 4)
weightmedian <- function(directory, day) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which([, "Day"] == day),]
median(dat_subset [, "Weight"], na.rm=TRUE)
}
weightmedian <- function(directory, day) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which([, "Day"] == day),]
median(dat_subset [, "Weight"], na.rm=TRUE)
}
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian("diet_data",4)
source('~/.active-rstudio-document', echo=TRUE)
weightmedian2 <- function(directory, day) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which([, "Day"] == day),]
median(dat_subset [, "Weight"], na.rm=TRUE)
}
weightmedian2 <- function(directory, day) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]
median(dat_subset [, "Weight"], na.rm=TRUE)
}
weightmedian2("diet_data", 4)
setwd("~/Desktop/JHU_data_science/ProgrammingAssignment2")
file.edit('cachematrix.r')
